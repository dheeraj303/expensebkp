const express=require('express');
require('dotenv').config();
const bodyparser=require('body-parser');
const path=require('path');
const cors=require('cors');
const fs=require('fs');
const helmet=require('helmet');
const morgan=require('morgan');
const User= require('./models/user');
const Expense=require('./models/expense');
const Order=require('./models/order');
const DownloadData=require('./models/downloaddata');
const Password=require('./models/password');
const userroutes=require('./Routes/user');
const expenseroute=require('./Routes/expense');
const orderroute=require('./Routes/order');
const premiumroute=require('./Routes/premium');
const accesslogstream=fs.createWriteStream(path.join(__dirname,'access.log'),{flags:'a'});
const errorcontroller=require('./controllers/error');
const app=express();
app.use(cors());
app.use(bodyparser.json());
app.use(helmet());
app.use(morgan('combined',{stream:accesslogstream}));
app.use(userroutes);
app.use(expenseroute);
app.use('/purchase',orderroute);
app.use('/premium',premiumroute);
app.use(errorcontroller.get404);
const sequelize = require('./Util/database');
User.hasMany(Expense);
Expense.belongsTo(User);
User.hasMany(Order);
Order.belongsTo(User);
User.hasMany(Password);
Password.belongsTo(User);
User.hasMany(DownloadData);
DownloadData.belongsTo(User);
sequelize.sync().then((result)=>{
    // console.log(result);
    app.listen(process.env.PORT)
}).catch(err=>console.log(err));